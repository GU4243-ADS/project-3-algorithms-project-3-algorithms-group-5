load("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/data/EM_sim_spearman.RData")
load("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/data/MS_sim_spearman.RData")
load("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/data/MS_UI.RData")
load("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/data/EM_UI.RData")
load("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/data/EM_sim_spearman.RData")
load("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/data/MS_sim_spearman.RData")
load("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/data/EM_UI_test.RData")
load("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/data/MS_UI_test.RData")
load("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/data/MS_pred.RData")
load("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/data/movie_pred.RData")
View(MS_pred)
View(movie_pred)
View(movie_UI_test)
#select part of matrix
pred <- movie_pred[,1:100]
View(pred)
dim(pred)
View(movie_pred)
cols_to_test <- which(is.na(movie_UI_test[1, ]))
cols_to_test <- which(is!.na(movie_UI_test[1, ]))
cols_to_test <- which(!is.na(movie_UI_test[1, ]))
predicton[1,]
pred[1,]
i <- pred[1,]
??MAE
?MAE
??MAE
library(MLmetrics)
install.packages("MLmetrics")
library(MLmetrics)
predi <- pred[1,]
test <- cols_to_test[1,]
MAE(cols_to_test,pred)
i <- MAE(cols_to_test,pred)
i <- MAE(cols_to_test,pred)
b <- matrix()
b <- b+1
View(b)
b <- b+2
View(b)
b <- b+1
b <- b+1+1
View(b)
b <- matrix()
View(b)
b <- b + i
View(b)
b <- rbind(b,i)
View(b)
b <- rbind(b,1,i)
View(b)
b <- matrix()
b <- rbind(b,1,i)
View(b)
b <- matrix()
b <- cbind(b,1,i)
View(b)
matrix_mae <- cbind(matrix_mae, i, mae)
b <- matrix()
b <- cbind(1,i)
View(b)
matrix_mae <- cbind(i, mae)
b <- cbind(1,i)
View(b)
b <- cbind(2,i)
View(b)
b <- cbind(1,i)
c <- matrix()
c <- rbind(b,c)
c <- rbind(c,b)
View(c)
View(b)
c <- matrix(1:2)
View(c)
c <- matrix(ncol = 2)
View(c)
c <- rbind(c,b)
View(c)
dim(pred)
#select part of matrix
pred <- movie_pred[,1:100]
dim(pred)
mae <- function(predictoin,test_data){
matrix_mae <- matrix(ncol = 2)
for (i in 1:nrow(test_data)){
cols_to_test <- which(!is.na(test_data[i, ]))
num_cols <- length(cols_to_test)
pred  <- prediction[i, ]
mae <- MAE(cols_to_test,pred)
labels <- cbind(i, mae)
matrix_mae <- rbind(matrix_mae,labels)
print(i)
}
matrix_mae <- na.omit(matrix_mae)
evaluation = sum(matrix_mae)/num_cols
return(evaluation)
}
mae(pred, movie_UI_test)
#select part of matrix
pred <- movie_pred[,1:100]
mae(pred, movie_UI_test)
mae(predictoin = pred, movie_UI_test)
mae(pred, movie_UI_test)
#select part of matrix
pred <- movie_pred[,1:100]
mae <- function(prediction,test_data){
matrix_mae <- matrix(ncol = 2)
for (i in 1:nrow(test_data)){
cols_to_test <- which(!is.na(test_data[i, ]))
num_cols <- length(cols_to_test)
pred  <- prediction[i, ]
mae <- MAE(cols_to_test,pred)
labels <- cbind(i, mae)
matrix_mae <- rbind(matrix_mae,labels)
print(i)
}
matrix_mae <- na.omit(matrix_mae)
evaluation = sum(matrix_mae)/num_cols
return(evaluation)
}
mae(pred, movie_UI_test)
print(matrix_mae)
test <- movie_UI_test[,1:100]
#select part of matrix
pred <- movie_pred[,1:100]
test <- movie_UI_test[,1:100]
mae <- function(prediction,test_data){
matrix_mae <- matrix(ncol = 2)
for (i in 1:nrow(test_data)){
cols_to_test <- which(!is.na(test_data[i, ]))
num_cols <- length(cols_to_test)
pred  <- prediction[i, ]
mae <- MAE(cols_to_test,pred)
labels <- cbind(i, mae)
matrix_mae <- rbind(matrix_mae,labels)
print(i)
}
matrix_mae <- na.omit(matrix_mae)
print(matrix_mae)
print(sum(matrix_mae))
print(num_cols)
evaluation = sum(matrix_mae)/num_cols
return(evaluation)
}
mae(pred, test)
View(c)
#select part of matrix
pred <- movie_pred[,1:100]
test <- movie_UI_test[,1:100]
mae <- function(prediction,test_data){
matrix_mae <- matrix(ncol = 2)
for (i in 1:nrow(test_data)){
cols_to_test <- which(!is.na(test_data[i, ]))
num_cols <- length(cols_to_test)
pred  <- prediction[i, ]
mae <- MAE(cols_to_test,pred)
labels <- cbind(i, mae)
matrix_mae <- rbind(matrix_mae,labels)
print(i)
}
matrix_mae <- na.omit(matrix_mae)
print(matrix_mae[,2])
print(sum(matrix_mae))
print(num_cols)
evaluation = sum(matrix_mae)/num_cols
return(evaluation)
}
mae(pred, test)
#select part of matrix
pred <- movie_pred[,1:100]
test <- movie_UI_test[,1:100]
mae <- function(prediction,test_data){
matrix_mae <- matrix(ncol = 2)
for (i in 1:nrow(test_data)){
cols_to_test <- which(!is.na(test_data[i, ]))
num_cols <- length(cols_to_test)
pred  <- prediction[i, ]
mae <- MAE(cols_to_test,pred)
labels <- cbind(i, mae)
matrix_mae <- rbind(matrix_mae,labels)
}
matrix_mae <- na.omit(matrix_mae)
print(matrix_mae[,2])
print(sum(matrix_mae[,2]))
evaluation = sum(matrix_mae[,2])/num_cols
return(evaluation)
}
mae(pred, test)
#select part of matrix
pred <- movie_pred[,1:100]
test <- movie_UI_test[,1:100]
mae <- function(prediction,test_data){
matrix_mae <- matrix(ncol = 2)
for (i in 1:nrow(test_data)){
cols_to_test <- which(!is.na(test_data[i, ]))
num_cols <- length(cols_to_test)
pred  <- prediction[i, ]
mae <- MAE(cols_to_test,pred)
labels <- cbind(i, mae)
matrix_mae <- rbind(matrix_mae,labels)
}
matrix_mae <- na.omit(matrix_mae)
print(matrix_mae[,2])
print(sum(matrix_mae[,2]))
print(num_cols)
evaluation = sum(matrix_mae[,2])/num_cols
return(evaluation)
}
mae(pred, test)
#select part of matrix
pred <- movie_pred[,1:100]
test <- movie_UI_test[,1:100]
mae <- function(prediction,test_data){
matrix_mae <- matrix(ncol = 2)
for (i in 1:nrow(test_data)){
cols_to_test <- which(!is.na(test_data[i, ]))
pred  <- prediction[i, ]
mae <- MAE(cols_to_test,pred)
labels <- cbind(i, mae)
matrix_mae <- rbind(matrix_mae,labels)
}
matrix_mae <- na.omit(matrix_mae)
print(matrix_mae[,2])
print(sum(matrix_mae[,2]))
evaluation = sum(matrix_mae[,2])/i
return(evaluation)
}
mae(pred, test)
#select part of matrix
pred <- movie_pred[,1:100]
test <- movie_UI_test[,1:100]
mae <- function(prediction,test_data){
matrix_mae <- matrix(ncol = 2)
for (i in 1:nrow(test_data)){
cols_to_test <- which(!is.na(test_data[i, ]))
pred  <- prediction[i, ]
mae <- MAE(cols_to_test,pred)
labels <- cbind(i, mae)
matrix_mae <- rbind(matrix_mae,labels)
}
matrix_mae <- na.omit(matrix_mae)
evaluation = sum(matrix_mae[,2])/i
return(evaluation)
}
mae(pred, test)
packages <- c("MLmetrics","Metrics")
packages <- lapply(packages, FUN = function(x) {
if(!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
#setwd("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/data")
load("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/data/EM_UI_test.RData")
load("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/data/MS_UI_test.RData")
load("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/data/movie_pred.RData")
load("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/data/MS_pred.RData")
packages <- c("MLmetrics","Metrics","Tidyverse")
packages <- lapply(packages, FUN = function(x) {
if(!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
packages <- c("MLmetrics","Metrics","tidyverse")
packages <- lapply(packages, FUN = function(x) {
if(!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
pred_MS <- as.data.frame(MS_pred[,1])
pred_MS$id <- row.names(pred_MS)
test_MS <- as.data.frame(MS_UI[,1])
test_MS$id <- row.names(test_MS)
all <- merge(pred_MS,test_MS)
View(all)
p <- all[,3] - all[,2]
p <- all[,2] - all[,3]
p <- max(p,0)
#Rank score of each user
RS <- function(pred, test){
pred <- as.data.frame(pred[,1])
test <- as.data.frame(test[,1])
pred$id <- row.names(pred)
test$id <- row.names(test)
rs <- merge(pred,test)
total = 0
for (i in 1:nrow(rs)-1){
p <- rs[,2] - rs[,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
total <- total + p
}
return(total)
}
#Rank score of each user
RS <- function(pred, test){
pred <- as.data.frame(pred)
test <- as.data.frame(test)
pred$id <- row.names(pred)
test$id <- row.names(test)
rs <- merge(pred,test)
total = 0
for (i in 1:nrow(rs)-1){
p <- rs[,2] - rs[,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
total <- total + p
}
return(total)
}
RS(pred[,1], test[,1])
RS(MS_pred[,1], MS_UI[,1])
pred = MS_pred[,1]
test = MS_UI[,1]
pred <- as.data.frame(pred)
test <- as.data.frame(test)
pred$id <- row.names(pred)
test$id <- row.names(test)
rs <- merge(pred,test)
total = 0
for (i in 1:nrow(rs)-1){
p <- rs[,2] - rs[,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
total <- total + p
}
i = 2
p <- rs[,2] - rs[,3]
p <- rs[i,2] - rs[i,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
total <- total + p
for (i in 1:nrow(rs)-1){
p <- rs[i,2] - rs[i,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
total <- total + p
}
for (i in 2:nrow(rs)-1){
p <- rs[i,2] - rs[i,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
total <- total + p
}
return(total)
for (i in 2:nrow(rs)-1){
p <- rs[i,2] - rs[i,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
total <- total + p
}
for (i in 2:nrow(rs)-1){
p <- rs[i,2] - rs[i,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
print(p)
total <- total + p
}
total <- total + p
print(total)
for (i in 2:nrow(rs)-1){
p <- rs[i,2] - rs[i,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
total <- total + p
print(total)
}
total = 0
for (i in 2:nrow(rs)-1){
p <- rs[i,2] - rs[i,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
total <- total + p
}
total = 0
total = 0
for (i in 2:nrow(rs)-1){
p <- rs[i,2] - rs[i,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
print(p)
total <- total + p
print(total)
}
total = 0
for (i in 2:nrow(rs)-1){
p <- rs[i,2] - rs[i,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
print(p)
total = total + p
print(total)
}
for (i in 2:nrow(rs)-1){
p <- rs[i,2] - rs[i,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
print(p)
total = total + p
if (is.na(total)){
print(i)
break
}
print(total)
}
2:nrow(rs)
2:nrow(rs)-1
for (i in 2:nrow(rs)-1){
p <- rs[i,2] - rs[i,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
print(p)
total = total + p
if (is.na(total)){
print(i)
break
}
print(total)
}
print(i)
for (i in 2:nrow(rs)-1){
print(i)
}
for (i in 2:nrow(rs)-4000){
print(i)
}
for (i in 2:nrow(rs)){
print(i)
}
for (i in 2:nrow(rs)){
p <- rs[i,2] - rs[i,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
print(p)
total = total + p
if (is.na(total)){
print(i)
break
}
print(total)
}
total = 0
for (i in 2:nrow(rs)){
p <- rs[i,2] - rs[i,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
print(p)
total = total + p
if (is.na(total)){
print(i)
break
}
}
for (i in 2:nrow(rs)){
p <- rs[i,2] - rs[i,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
total = total + p
if (is.na(total)){
print(i)
break
}
}
#Rank score of each user
RS <- function(pred, test){
pred = MS_pred[,1]
test = MS_UI[,1]
pred <- as.data.frame(pred)
test <- as.data.frame(test)
pred$id <- row.names(pred)
test$id <- row.names(test)
rs <- merge(pred,test)
total = 0
for (i in 2:nrow(rs)){
p <- rs[i,2] - rs[i,3]
p <- max(p,0)
denominator <- (i - 1) * (5 - 1)# set a = 5
p <- p / denominator
total = total + p
if (is.na(total)){
print(i)
break
}
}
return(total)
}
RS(MS_pred[,1], MS_UI[,1])
source("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/lib/evaluation.R")
source("/Users/miezai/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-5/lib/evaluation.R")
pred_MS <- MS_pred[,1:100]
test_MS <- MS_UI[,1:100]
View(pred_MS)
eva_rs(pred_MS, test_MS)
